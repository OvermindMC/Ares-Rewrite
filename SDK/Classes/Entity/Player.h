#pragma once

#include "Actor.h"

class Player : public Actor {
private:
    virtual ~Player(void);
public:
    virtual auto knockback(class Actor*, int, float, float, float, float, float) -> void;
    virtual auto spawnAnim(void) -> void;
    virtual auto setSprinting(bool) -> void;
    virtual auto getHurtSound(void) -> enum LevelSoundEvent;
    virtual auto getDeathSound(void) -> enum LevelSoundEvent;
    virtual auto getSpeed(void) -> float;
    virtual auto setSpeed(float) -> void;
    virtual auto hurtEffects(struct ActorDamageSource*, float, bool, bool) -> void;
    virtual auto aiStep(void) -> void;
    virtual auto pushActors(void) -> void;
    virtual auto checkSpawnRules(bool) -> bool;
    virtual auto checkSpawnObstruction(void) -> bool;
    virtual auto getItemUseDuration(void) -> __int64;
    virtual auto getItemUseStartupProgress(void) -> float;
    virtual auto getItemUseIntervalProgress(void) -> float;
    virtual auto getMaxHeadXRot(void) -> float;
    virtual auto isAlliedTo(class Mob*) -> bool;
    virtual auto doHurtTarget(class Actor*, enum ActorDamageCause*) -> bool;
    virtual auto getArmorValue(void) -> __int64;
    virtual auto hurtArmorSlots(struct ActorDamageSource const&, int, std::bitset<4>) -> void;
    virtual auto setDamagedArmor(enum ArmorSlot, class ItemStack*) -> void;
    virtual auto sendArmorDamage(std::bitset<4>) -> void;
    virtual auto sendArmor(std::bitset<4>) -> void;
    virtual auto getAllHand(void) -> __int64;
    virtual auto getAllEquipment(void) -> __int64;
    virtual auto dropEquipmentOnDeath(void) -> __int64;
    virtual auto dropEquipmentOnDeath(struct ActorDamageSource*, int) -> void;
    virtual auto clearVanishEnchantedItemsOnDeath(void) -> void;
    virtual auto sendInventory(bool) -> void;
    virtual auto getDamageAfterEnchantReduction(struct ActorDamageSource*, float) -> float;
    virtual auto createAIGoals(void) -> bool;
    virtual auto onBorn(Actor*, Actor*) -> void;
    virtual auto setItemSlot(enum EquipmentSlot, class ItemStack*) -> bool;
    virtual auto setTransitioningSitting(bool) -> void;
    virtual auto _getWalkTargetValue(Vec3<int>) -> float;
    virtual auto canExistWhenDisallowMob(void) -> bool;
    virtual auto initBodyControl(void) -> std::unique_ptr<class BodyControl>;
    virtual auto newServerAiStep(void) -> void;
    virtual auto tickDeath(void) -> void;
    virtual auto _getAdjustedAABBForSpawnCheck(AABB<float>&, Vec3<float>&) -> AABB<float>&;
    virtual auto prepareRegion(class ChunkSource*) -> void;
    virtual auto destroyRegion(void) -> void;
    virtual auto suspendRegion(void) -> void;
    virtual auto _fireDimensionChanged(void) -> void;
    virtual auto changeDimensionWithCredits(class AutomaticID<class Dimension, int>) -> void;
    virtual auto tickWorld(class Tick*) -> void;
    virtual auto frameUpdate(class FrameUpdateContextBase*) -> void;
    virtual auto getTickingOffsets(void) -> std::vector<class ChunkPos>&;
    virtual auto moveView(void) -> void;
    virtual auto moveSpawnView(Vec3<float>&, class AutomaticID<class Dimension, int>) -> void;
    virtual auto checkMovementStats(Vec3<float>) -> void;
    virtual auto getCurrentStructureFeature(void) -> class StructureFeature;
    virtual auto isAutoJumpEnabled(void) -> bool;
    virtual auto respawn(void) -> void;
    virtual auto resetRot(void) -> void;
    virtual auto isInTrialMode(void) -> bool;
    virtual auto openPortfolio(void) -> void;
    virtual auto openBook(int, bool, int, class BlockActor*) -> void;
    virtual auto openTrading(uint64_t, bool) -> void;
    virtual auto openChalkboard(class ChalkboardBlockActor*, bool) -> void;
    virtual auto openNpcInteractScreen(void*) -> void;
    virtual auto openInventory(void) -> void;
    virtual auto displayChatMessage(std::string*, std::string*) -> void;
    virtual auto displayClientMessage(std::string*) -> void;
    virtual auto displayTextObjectMessage(class TextObjectRoot*, std::string*, std::string*) -> void;
    virtual auto displayTextObjectWhisperMessage(class ResolvedTextObject*, std::string*, std::string*) -> void;
    virtual auto displayTextObjectWhisperMessage(std::string*, std::string*, std::string*) -> void;
    virtual auto displayWhisperMessage(std::string*, std::string*, std::string*, std::string*) -> void;
    virtual auto startSleepInBed(Vec3<int>) -> enum BedSleepingResult;
    virtual auto stopSleepInBed(bool, bool) -> void;
    virtual auto canStartSleepInBed(void) -> bool;
    virtual auto openSign(Vec3<int>*, bool) -> void;
    virtual auto playEmote(std::string&) -> void;
    virtual auto isLoading(void) -> bool;
    virtual auto isPlayerInitialized(void) -> bool;
    virtual auto stopLoading(void) -> void;
    virtual auto setPlayerGameType(enum GameType) -> void;
    virtual auto initHUDContainerManager(void) -> void;
    virtual auto _crit(class Actor*) -> void;
    virtual auto getEventing(void) -> class IMinecraftEventing*;
    virtual auto getUserId(void) -> __int64;
    virtual auto addExperience(int) -> void;
    virtual auto addLevels(int) -> void;
    virtual auto setContainerData(class IContainerManager*, int, int) -> void;
    virtual auto slotChanged(class IContainerManager*, class Container*, int, class ItemStack*, class ItemStack*, bool) -> void;
    virtual auto refreshContainer(class IContainerManager*) -> void;
    virtual auto deleteContainerManager(void) -> void;
    virtual auto isActorRelevant(class Actor*) -> void;
    virtual auto isTeacher(void) -> bool;
    virtual auto onSuspension(void) -> void;
    virtual auto onLinkedSlotsChanged(void) -> void;
    virtual auto sendInventoryTransaction(class InventoryTransaction*) -> void;
    virtual auto sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction*>) -> void;
    virtual auto sendNetworkPacket(class Packet*) -> void;
    virtual auto getPlayerEventCoordinator(void) -> class PlayerEventCoordinator*;
    virtual auto isSimulated(void) -> bool;
    virtual auto getXuid(void) -> std::string&;
    virtual auto getMovementSettings(void) -> class PlayerMovementSettings*;
    virtual auto requestMissingSubChunk(class SubChunkPos const&) -> void;
    virtual auto getMaxChunkBuildRadius(void) -> unsigned __int8;
    virtual auto onMovePlayerPacketNormal(Vec3<float>*, Vec2<float>*, float) -> void;
    virtual auto _createChunkSource(class ChunkSource&) -> std::shared_ptr<class ChunkViewSource>;
    virtual auto setAbilities(class LayeredAbilities*) -> void;
};